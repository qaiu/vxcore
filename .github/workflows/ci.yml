name: VXCore CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  MAVEN_OPTS: -Xmx1024m

jobs:
  # 编译检查
  compile:
    name: Compile Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Compile project
      run: mvn clean compile -q
      
    - name: Check for compilation errors
      run: |
        if [ $? -ne 0 ]; then
          echo "❌ Compilation failed"
          exit 1
        fi
        echo "✅ Compilation successful"

  # 代码质量检查
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: compile
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Check code style
      run: mvn spotless:check
      
    - name: Run static analysis
      run: mvn spotbugs:check
      
    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: spotbugs-results
        path: target/spotbugsXml.xml

  # 单元测试
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: compile
    
    strategy:
      matrix:
        java-version: [17, 21]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run unit tests
      run: mvn clean test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests (Java ${{ matrix.java-version }})
        path: target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: Generate coverage report
      run: mvn jacoco:report
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # 集成测试
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [compile, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run PostgreSQL tests
      run: mvn test -Dtest="*PostgreSQL*" -Dspring.profiles.active=test
      env:
        POSTGRES_URL: jdbc:postgresql://localhost:5432/testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        
    - name: Run H2 tests
      run: mvn test -Dtest="*H2*"
      
    - name: Start example service
      run: |
        mvn exec:java -Dexec.mainClass="cn.qaiu.example.SimpleRunner" &
        sleep 15
        
    - name: Test HTTP endpoints
      run: |
        curl -f http://localhost:8080/api/hello?name=Test
        curl -f http://localhost:8080/api/users
        
    - name: Stop example service
      run: pkill -f "cn.qaiu.example.SimpleRunner"

  # 构建验证
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [compile, test, integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build project
      run: mvn clean package -DskipTests=true
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: vxcore-jars
        path: target/*.jar
        retention-days: 7
        
    - name: Generate site documentation
      run: mvn site
      
    - name: Upload site documentation
      uses: actions/upload-artifact@v3
      with:
        name: site-docs
        path: target/site
        retention-days: 7

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: compile
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run OWASP dependency check
      run: mvn org.owasp:dependency-check-maven:check
      
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: target/dependency-check-report.html
