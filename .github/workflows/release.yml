name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

env:
  MAVEN_OPTS: -Xmx1024m

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Set version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        fi
        
    - name: Update version in pom.xml
      run: mvn versions:set -DnewVersion=${{ env.VERSION }}
      
    - name: Run full test suite
      run: mvn clean test
      env:
        CI: true
      
    - name: Build project
      run: mvn clean package -DskipTests=false
      env:
        CI: true
      
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=No changelog available" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: VXCore v${{ env.VERSION }}
        body: |
          ## VXCore v${{ env.VERSION }}
          
          ### Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### Downloads
          - JAR files are attached to this release
          - Documentation is available in the site artifacts
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/vxcore-core-${{ env.VERSION }}.jar
        asset_name: vxcore-core-${{ env.VERSION }}.jar
        asset_content_type: application/java-archive
        
    - name: Upload Database Module
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/vxcore-database-${{ env.VERSION }}.jar
        asset_name: vxcore-database-${{ env.VERSION }}.jar
        asset_content_type: application/java-archive
        
    - name: Upload Example Module
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/vxcore-example-${{ env.VERSION }}.jar
        asset_name: vxcore-example-${{ env.VERSION }}.jar
        asset_content_type: application/java-archive

  publish:
    name: Publish to Maven Central
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Set version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
    - name: Update version in pom.xml
      run: mvn versions:set -DnewVersion=${{ env.VERSION }}
      
    - name: Configure GPG
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d > private.key
        gpg --import private.key
        gpg --list-secret-keys
        
    - name: Publish to Maven Central
      run: mvn clean deploy -P release
      env:
        CI: true
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
